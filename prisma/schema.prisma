// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Administrator
  SysUser
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String
  role          Role @default(Administrator)
  image         String?
  properties    Properties[]
  billing       Billing[]
  createdAt     DateTime @default(now())
  createdBy     String?
  updatedBy     String?
  deletedAt     DateTime?
}

model Tenant {
  id            String       @id @default(cuid())
  name          String
  email         String       @unique
  password      String
  contactNo     String
  address       String
  emailVerified DateTime?
  image         String?
  spaces        Spaces[]
  billing       Billing[]
  createdAt DateTime @default(now())
  createdBy     String
  updatedBy     String
  deletedAt     DateTime?
  accounts      Account[]    @relation("TenantAccounts")
  sessions      Session[]    @relation("TenantSessions")
}
model Properties {
  id            String       @id @default(cuid())
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  propertyName  String
  regOwnerName  String
  titleNo       String
  sysUserId     String
  sysUser       User      @relation(fields: [sysUserId], references: [id])
  spaces        Spaces[]
  createdBy     String
  updatedBy     String
  deletedAt     DateTime?
}

model Spaces {
  id            String       @id @default(cuid())
  spaceName     String
  oStatus       String
  leasePeriod   String?
  expiryDate    DateTime?
  gFloorArea    Float?
  mezFloor      Float?
  secFloor      Float?
  thirdFloor    Float?
  roofTop       Float?
  totalArea     Float
  monthlyRent   Float
  tenantId      String
  tenant        Tenant       @relation(fields: [tenantId], references: [id])
  propertyId    String
  property      Properties   @relation(fields: [propertyId], references: [id])
  createdAt DateTime @default(now())
  createdBy     String
  updatedBy     String
  deletedAt     DateTime?
}

model Billing {
  id            String       @id @default(cuid())
  billName      String
  billAmount    String
  dueDate       DateTime
  sysUserId     String
  sysUser       User      @relation(fields: [sysUserId], references: [id])
  tenantId      String
  tenant        Tenant       @relation(fields: [tenantId], references: [id])
  attachmentId  String?      @unique
  attachment    Attachment? @relation(fields: [attachmentId], references: [id])
  createdAt DateTime @default(now())
  createdBy     String
  updatedBy     String
  deletedAt     DateTime?
}

model Attachment {
  id        String @id @default(cuid())
  filePath  String
  fileName  String
  fileType  String
  fileSize  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  billing   Billing?
}

model Account {
  id        String @id @default(cuid())
  compoundId String @unique
  tenantId  String
  providerType String
  providerId   String
  providerAccountId String
  refreshToken String?
  accessToken  String?
  accessTokenExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant @relation("TenantAccounts", fields: [tenantId], references: [id])
  createdBy String
  updatedBy String
  deletedAt DateTime?
}

model Session {
  id        String @id @default(cuid())
  tenantId  String
  expires   DateTime
  sessionToken String @unique
  accessToken String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant @relation("TenantSessions", fields: [tenantId], references: [id])
  createdBy String
  updatedBy String
  deletedAt DateTime?
}